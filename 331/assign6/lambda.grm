
(*  fun mkprint (expr,pos)  = A.PrintS(expr,pos) *)
(*  fun mkassign name value pos= A.AssignS(name,value,pos) *)
(*  fun mkadd(e1,e2,pos) = A.AddE(e1,e2,pos) *)
(*  fun mkfloat value = A.FloatE(value) *)
(*  fun mkref (id, pos) = (Absyn.make_id(id, pos)) *)

%%

%name LambdaCalc 
%term  VAR of string
  | INT of int
  | DOT  
  | LPAREN  
  | RPAREN  
  | LAMBDA
  | PLUS  
  | MULT
  | MINUS
  | DIVIDE
  | MOD
  | IF
  | LT
  | GT
  | EQ
  | AND
  | OR
  | NOT
  | LET
  | BE
  | IN
  | EOF

%nonterm    Program             of Absyn.LambdaExp
            | LambdaExp 	of Absyn.LambdaExp

%eop EOF

%start Program
%pos int
%pure
%verbose

(* %keyword LAMBDA *)

(*  %value NAME ("bogus") *)
(*  %value FLOAT (1.0) *)

%%

Program       : LambdaExp EOF                           (LambdaExp)
LambdaExp     : VAR                                     (Absyn.Var(VAR))
              | INT                                     (Absyn.Con(Absyn.Num(INT)))
              | LAMBDA VAR DOT LambdaExp                (Absyn.Abs(VAR, LambdaExp))
              | LPAREN LambdaExp LambdaExp RPAREN       (Absyn.App(LambdaExp1, LambdaExp2))
              | LPAREN PLUS LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("+",(op +))),LambdaExp1),LambdaExp2))
              | LPAREN MULT LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("*",(op * ))),LambdaExp1),LambdaExp2))
              | LPAREN MINUS LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("-",(op - ))),LambdaExp1),LambdaExp2))
              | LPAREN DIVIDE LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("/",(op div ))),LambdaExp1),LambdaExp2))
              | LPAREN MOD LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("%",(op mod ))),LambdaExp1),LambdaExp2))
              | LPAREN IF LambdaExp LambdaExp LambdaExp RPAREN (Absyn.App(Absyn.App(Absyn.App(Absyn.Con(Absyn.Op3("if", (fn (a:int, b:int, c:int) => if a=0 then c else b))), LambdaExp1),LambdaExp2), LambdaExp3))
	      | LPAREN LT LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("<",(fn (a,b)=> if a<b then 1 else 0 ))),LambdaExp1),LambdaExp2))
              | LPAREN GT LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2(">",(fn (a,b)=> if a>b then 1 else 0))),LambdaExp1),LambdaExp2))
              | LPAREN EQ LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("=",(fn (a,b)=> if a=b then 1 else 0))),LambdaExp1),LambdaExp2))
              | LPAREN AND LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("&",(fn (a,b)=> if a=1 then (if b=1 then 1 else 0) else 0))),LambdaExp1),LambdaExp2))
              | LPAREN OR LambdaExp LambdaExp RPAREN  (Absyn.App(Absyn.App(Absyn.Con(Absyn.Op2("|",(fn (a,b)=> if a=1 then 1 else (if b=1 then 1 else 0)))),LambdaExp1),LambdaExp2))
	      | LPAREN NOT LambdaExp RPAREN  (Absyn.App(Absyn.Con(Absyn.Op1("!",(fn a=> if a=1 then 0 else 1))),LambdaExp1))
	      | LPAREN LET VAR BE LambdaExp IN LambdaExp RPAREN (Absyn.App(Absyn.Abs(VAR, LambdaExp2), LambdaExp1))
