he initial version of the program
 * Usage: progname source_file resulting_file
 * for example: sharfile sharfile.c shar.bak
 */
  
#include <stdio.h>
#include <fcntl.h>
main (argc,argv)
int argc;
char  *argv[];
{
int N=5000;
int fdrd,fdwt1,fdwt2;
char c;
char parent = 'P';
char child ='C'; 
int pid;
unsigned long i;
if (argc != 4) {
perror("You did not give me two arguments. I want two, and only two files.\n");
exit (1);
}
/*if (strcmp(argv[1], argv[2])==0){
perror("The two arguments are the same file. Fix it dork.\n");
exit(1);
}*/
if ((fdrd = open(argv[1], O_RDONLY)) == -1) {
perror("The source file could not be opened. Too bad, sucks for you.\n");
exit (1);
}
printf("Parent: creating a child process\n");
pid = fork ();
if (pid == 0)
   {
   printf("Child process starts, id = %d\n",getpid());
   if ((fdwt2 = creat(argv[3], 0666)) == -1) {
      perror("Could not create or open the destination file 2. Too bad, sucks for you.\n");
      exit (1);
   }
int i;
   for (i=0;i<N;i++)
          {
	
	int readSuccess=read (fdrd, &c, 1);
//	if (readSuccess == -1) perror("Could not read from the source file.\n");
//	if (readSuccess != 1) break;
//          for (i=0; i<N;i++);   /* Long cycle */
    /*      if (write(1,&child,1)==-1)
		perror("Error writing to standard output by the Child.\n"); */
          if (write (fdwt2, &c, 1)==-1)
		perror("Child error writing to the destination file.\n"); 
          
          } 
   exit (0);
   }
else 
   {
   printf("Parent starts, id= %d\n", getpid());
if ((fdwt1 = creat(argv[2], 0666)) == -1) {file.c shar.bak
 */
  
#include <stdio.h>
#include <fcntl.h>
main (argc,argv)
int argc;
char  *argv[];
{
int N=5000;
int fdrd,fdwt1,fdwt2;
char c;
char parent = 'P';
char child ='C'; 
int pid;
unsigned long i;
if (argc != 4) {
perror("You did not give me two arguments. I want two, and only two files.\n");
exit (1);
}
/*if (strcmp(argv[1], argv[2])==0){
perror("The two arguments are the same file. Fix it dork.\n");
exit(1);
}*/
if ((fdrd = open(argv[1], O_RDONLY)) == -1) {
perror("The source file could not be opened. Too bad, sucks for you.\n");
exit (1);
}
printf("Parent: creating a child process\n");
pid = fork ();
if (pid == 0)
   {
   printf("Child process starts, id = %d\n",getpid());
   if ((fdwt2 = creat(argv[3], 0666)) == -1) {
      perror("Could not create or open the destination file 2. Too bad, sucks for you.\n");
      exit (1);
   }
int i;
   for (i=0;i<N;i++)
          {
	
	int readSuccess=read (fdrd, &c, 1);
//	if (readSuccess == -1) perror("Could not read from the source file.\n");
//	if (readSuccess != 1) break;
//          for (i=0; i<N;i++);   /* Long cycle */
    /*      if (write(1,&child,1)==-1)
		perror("Error writing to standard output by the Child.\n"); */
          if (write (fdwt2, &c, 1)==-1)
		perror("Child error writing to the destination file.\n"); 
          
          } 
   exit (0);
   }
else 
   {
   printf("Parent starts, id= %d\n", getpid());
if ((fdwt1 = creat(argv[2], 0666)) == -1) {
perror("Could not create or open the destination file 1. Too bad, sucks for you.\n");
exit (1);
}
int i;
   for (i=0;i<N;i++)
          {
          int readSuccess=read (fdrd, &c, 1);
//	if (readSuccess == -1) perror("Could not read from the source file.\n");  
//	if (readSuccess != 1) break;
  //        for (i=0;i<200000;i++);  /* Long cycle */
/*          if (write(1,&parent,1)==-1)
		perror("Error writing to standard output by the parent.\n"); */
          if (write (fdwt1, &c, 1)==-1)
		perror("Parent error writing to the destination file.\n");

          }
   wait (0);
   }
}
/* The initial version of the program
 * Usage: progname source_file resulting_file
 * for example: sharfile sharfile.c shar.bak
 */
  
#include <stdio.h>
#include <fcntl.h>
main (argc,argv)
int argc;
char  *argv[];
{
int N=5000;
int fdrd,fdwt1,fdwt2;
char c;
char parent = 'P';
char child ='C'; 
int pid;
unsigned long i;
if (argc != 4) {
perror("You did not give me two arguments. I want two, and only two files.\n");
exit (1);
}
/*if (strcmp(argv[1], argv[2])==0){
perror("The two arguments are the same file. Fix it dork.\n");
exit(1);
}*/
if ((fdrd = open(argv[1], O_RDONLY)) == -1) {
perror("The source file could not be opened. Too bad, sucks for you.\n");
exit (1);
}
printf("Parent: creating a child process\n");
pid = fork ();
if (pid == 0)
   {
   printf("Child process starts, id = %d\n",getpid());
   if ((fdwt2 = creat(argv[3], 0666)) == -1) {
      perror("Could not create or open the destination file 2. Too bad, sucks for you.\n");
      exit (1);
   }
int i;
   for (i=0;i<N;i++)
          {
	
	int readSuccess=read (fdrd, &c, 1);
//	if (readSuccess == -1) perror("Could not read from the source file.\n");
//	if (readSuccess != 1) break;
//          for (i=0; i<N;i++);   /* Long cycle */
    /*      if (write(1,&child,1)==-1)
		perror("Error writing to standard output by the Child.\n"); */
          if (write (fdwt2, &c, 1)==-1)
		perror("Child error writing to the destination file.\n");